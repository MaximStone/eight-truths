import { Telegraf, Context, Markup, session } from 'telegraf';
import { AppDataSource } from './dataSource';
import { User } from './entity/User';
import { Entry } from './entity/Entry';
import { format, subDays } from 'date-fns';

export interface MySession {
    entry: boolean[];
}

export interface MyContext extends Context {
    session: MySession;
}

const TRUTHS = [
    "–ü–æ–Ω–∏–º–∞–Ω–∏–µ",
    "–ù–∞–º–µ—Ä–µ–Ω–∏–µ",
    "–†–µ—á—å",
    "–î–µ–π—Å—Ç–≤–∏–µ",
    "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
    "–£—Å–∏–ª–∏–µ",
    "–í–Ω–∏–º–∞–Ω–∏–µ",
    "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è"
];

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
if (!TELEGRAM_TOKEN) {
    console.error("TELEGRAM_TOKEN environment variable not set");
    process.exit(1);
}

export const bot = new Telegraf<MyContext>(TELEGRAM_TOKEN);
bot.use(session({ defaultSession: () => ({ entry: Array(8).fill(true) }) }));

function buildMainMenu() {
    return Markup.keyboard([
        ['üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å'],
        ['üìä –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é', 'üìà –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü'],
        ['üì± –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é', '‚ÑπÔ∏è –ü–æ–º–æ—â—å']
    ]).resize();
}

export function buildKeyboard(entryState: boolean[]) {
    const buttons = entryState.map((state, index) => {
        const emoji = state ? "üü¢" : "üî¥";
        return Markup.button.callback(`${emoji} ${TRUTHS[index]}`, `toggle_${index}`);
    });
    const rows = [];
    for (let i = 0; i < buttons.length; i += 2) {
        rows.push(buttons.slice(i, i + 2));
    }
    rows.push([Markup.button.callback("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", "submit")]);
    return Markup.inlineKeyboard(rows);
}

export function buildInitialKeyboard() {
    const entryState = Array(8).fill(true);
    const buttons = entryState.map((state, index) => {
        const emoji = state ? "üü¢" : "üî¥";
        return { text: `${emoji} ${TRUTHS[index]}`, callback_data: `toggle_${index}` };
    });
    const rows = [];
    for (let i = 0; i < buttons.length; i += 2) {
        rows.push(buttons.slice(i, i + 2));
    }
    rows.push([{ text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data: "submit" }]);
    return rows;
}

async function generateReport(userId: number, days: number) {
    const entryRepository = AppDataSource.getRepository(Entry);
    const startDate = format(subDays(new Date(), days), 'yyyy-MM-dd');
    
    const entries = await entryRepository
        .createQueryBuilder("entry")
        .where("entry.userId = :userId", { userId })
        .andWhere("entry.date >= :startDate", { startDate })
        .orderBy("entry.date", "ASC")
        .getMany();

    if (entries.length === 0) {
        return "–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.";
    }

    let report = `üìä –û—Ç—á–µ—Ç –∑–∞ ${days === 6 ? '–Ω–µ–¥–µ–ª—é' : '–º–µ—Å—è—Ü'}:\n\n`;
    
    entries.forEach(entry => {
        const date = format(new Date(entry.date), 'dd.MM.yyyy');
        const notFollowed = [];
        
        if (!entry.truth1) notFollowed.push(TRUTHS[0]);
        if (!entry.truth2) notFollowed.push(TRUTHS[1]);
        if (!entry.truth3) notFollowed.push(TRUTHS[2]);
        if (!entry.truth4) notFollowed.push(TRUTHS[3]);
        if (!entry.truth5) notFollowed.push(TRUTHS[4]);
        if (!entry.truth6) notFollowed.push(TRUTHS[5]);
        if (!entry.truth7) notFollowed.push(TRUTHS[6]);
        if (!entry.truth8) notFollowed.push(TRUTHS[7]);

        report += `${date}: ${notFollowed.length === 0 ? 
            '‚úÖ –í—Å–µ –∏—Å—Ç–∏–Ω—ã —Å–æ–±–ª—é–¥–µ–Ω—ã' : 
            '‚ùå –ù–µ —Å–æ–±–ª—é–¥–∞–ª–∏—Å—å: ' + notFollowed.join(', ')}\n`;
    });

    return report;
}

bot.start(async (ctx) => {
    const chatId = ctx.chat?.id.toString();
    const username = ctx.from?.username || "";
    if (!chatId) {
        await ctx.reply("–ß–∞—Ç id –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    const userRepository = AppDataSource.getRepository(User);
    let user = await userRepository.findOne({ where: { chatId } });
    if (!user) {
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ.");
        user = new User();
        user.chatId = chatId;
        user.username = username;
        await userRepository.save(user);
    }

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è Web App
    const webAppUrl = process.env.WEBAPP_URL || 'https://your-domain.com';
    const webAppButton = Markup.button.webApp('üìä –û—Ç—á–µ—Ç', webAppUrl);

    await ctx.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ë–ª–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –í–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–≥–æ –ü—É—Ç–∏.\n\n" +
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏:",
        Markup.keyboard([
            ['üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å'],
            ['üìä –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é', 'üìà –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü'],
            ['üì± –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é', '‚ÑπÔ∏è –ü–æ–º–æ—â—å']
        ]).resize()
    );
});

bot.help((ctx) => {
    return ctx.reply(
        "üôè –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç:\n\n" +
        "üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n" +
        "üìä –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n" +
        "üìà –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n\n" +
        "–ö–æ–º–∞–Ω–¥—ã:\n" +
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
        "/report - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç\n" +
        "/new - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å",
        buildMainMenu()
    );
});

bot.command('new', async (ctx) => {
    ctx.session.entry = Array(8).fill(true);
    await ctx.reply("–û—Ç–º–µ—Ç—å—Ç–µ –∏—Å—Ç–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–æ–±–ª—é–¥–∞–ª–∏:", buildKeyboard(ctx.session.entry));
});

bot.command('report', async (ctx) => {
    await ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
        Markup.inlineKeyboard([
            [Markup.button.callback("–ó–∞ –Ω–µ–¥–µ–ª—é", "report_week")],
            [Markup.button.callback("–ó–∞ –º–µ—Å—è—Ü", "report_month")]
        ])
    );
});

bot.hears('üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å', async (ctx) => {
    ctx.session.entry = Array(8).fill(true);
    await ctx.reply("–û—Ç–º–µ—Ç—å—Ç–µ –∏—Å—Ç–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–æ–±–ª—é–¥–∞–ª–∏:", buildKeyboard(ctx.session.entry));
});

bot.hears('üìä –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é', async (ctx) => {
    const chatId = ctx.chat?.id.toString();
    if (!chatId) {
        await ctx.reply("–ß–∞—Ç id –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    
    const userRepository = AppDataSource.getRepository(User);
    const user = await userRepository.findOne({ where: { chatId } });
    if (!user) {
        await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    
    const report = await generateReport(user.id, 6);
    await ctx.reply(report);
});

bot.hears('üìà –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü', async (ctx) => {
    const chatId = ctx.chat?.id.toString();
    if (!chatId) {
        await ctx.reply("–ß–∞—Ç id –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    
    const userRepository = AppDataSource.getRepository(User);
    const user = await userRepository.findOne({ where: { chatId } });
    if (!user) {
        await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    
    const report = await generateReport(user.id, 29);
    await ctx.reply(report);
});

bot.hears('üì± –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é', async (ctx) => {
    const chatId = ctx.chat?.id.toString();
    if (!chatId) {
        await ctx.reply("–ß–∞—Ç id –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    
    const userRepository = AppDataSource.getRepository(User);
    const user = await userRepository.findOne({ where: { chatId } });
    if (!user) {
        await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    
    const webAppUrl = process.env.WEBAPP_URL || 'https://your-domain.com';
    // –î–æ–±–∞–≤–ª—è–µ–º user_id –≤ URL –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Web App
    await ctx.reply(
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é –æ—Ç—á–µ—Ç–∞:',
        Markup.inlineKeyboard([
            [Markup.button.webApp('üìä –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç', `${webAppUrl}?user_id=${user.id}`)]
        ])
    );
});

bot.hears('‚ÑπÔ∏è –ü–æ–º–æ—â—å', async (ctx) => {
    return ctx.reply(
        "üôè –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç:\n\n" +
        "üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n" +
        "üìä –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n" +
        "üìà –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n\n" +
        "–ö–æ–º–∞–Ω–¥—ã:\n" +
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
        "/report - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç\n" +
        "/new - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å",
        buildMainMenu()
    );
});

bot.action(/toggle_(\d+)/, async (ctx) => {
    const index = parseInt(ctx.match[1]);
    ctx.session.entry[index] = !ctx.session.entry[index];
    await ctx.editMessageText(
        "–û—Ç–º–µ—Ç—å—Ç–µ –∏—Å—Ç–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–æ–±–ª—é–¥–∞–ª–∏:",
        buildKeyboard(ctx.session.entry)
    );
});

bot.action('report_week', async (ctx) => {
    const chatId = ctx.chat?.id.toString();
    if (!chatId) {
        await ctx.reply("–ß–∞—Ç id –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    
    const userRepository = AppDataSource.getRepository(User);
    const user = await userRepository.findOne({ where: { chatId } });
    if (!user) {
        await ctx.editMessageText("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    
    const report = await generateReport(user.id, 6);
    await ctx.editMessageText(report);
});

bot.action('report_month', async (ctx) => {
    const chatId = ctx.chat?.id.toString();
    if (!chatId) {
        await ctx.reply("–ß–∞—Ç id –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    
    const userRepository = AppDataSource.getRepository(User);
    const user = await userRepository.findOne({ where: { chatId } });
    if (!user) {
        await ctx.editMessageText("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    
    const report = await generateReport(user.id, 29);
    await ctx.editMessageText(report);
});

bot.action("submit", async (ctx) => {
    const chatId = ctx.chat?.id.toString();
    if (!chatId) {
        await ctx.reply("–ß–∞—Ç id –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    
    const userRepository = AppDataSource.getRepository(User);
    const entryRepository = AppDataSource.getRepository(Entry);
    const user = await userRepository.findOne({ where: { chatId } });
    if (!user) {
        await ctx.editMessageText("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }
    
    const today = format(new Date(), 'yyyy-MM-dd');
    let entry = await entryRepository.findOne({ where: { user: { id: user.id }, date: today } });
    if (!entry) {
        entry = new Entry();
        entry.user = user;
        entry.date = today;
    }
    
    const entryState = ctx.session.entry;
    entry.truth1 = entryState[0];
    entry.truth2 = entryState[1];
    entry.truth3 = entryState[2];
    entry.truth4 = entryState[3];
    entry.truth5 = entryState[4];
    entry.truth6 = entryState[5];
    entry.truth7 = entryState[6];
    entry.truth8 = entryState[7];
    
    await entryRepository.save(entry);
    await ctx.editMessageText("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ!");
});

bot.catch((err) => {
    console.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err);
});

export async function startBot() {
    await bot.launch();
    console.log("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω.");
}
